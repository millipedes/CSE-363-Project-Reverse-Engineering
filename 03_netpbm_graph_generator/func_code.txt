int64_t * dbg.init_lexer(ulong arg1)

{
    int64_t *piVar1;
    int64_t iVar2;
    int64_t iVar3;
    ulong src;
    ulong l;
    ulong len;
    
    piVar1 = sym.imp.calloc();
    iVar2 = sym.imp.strnlen();
    iVar3 = sym.imp.calloc();
    *piVar1 = iVar3;
    sym.imp.strncpy(arg1, iVar2 + 1);
    *(piVar1 + 1) = 0;
    *(piVar1 + 0xc) = *(*(piVar1 + 1) + *piVar1);
    return piVar1;
}

ulong dbg.lex_number(int64_t *arg1)

{
    int32_t iVar1;
    bool bVar2;
    int64_t *piVar3;
    int64_t arg1_00;
    ulong uVar4;
    ulong l;
    int64_t len;
    ulong result;
    ulong tmp;
    
    len = 0;
    iVar1 = *(arg1 + 1);
    bVar2 = false;
    while( true ) {
        piVar3 = sym.imp.__ctype_b_loc();
        if ((*(*(arg1 + 0xc) * 2 + *piVar3) & 0x800) == 0) break;
        dbg.lex_advance(arg1);
        if ((*(arg1 + 0xc) == '.') && (!bVar2)) {
            dbg.lex_advance(arg1);
            len = len + 1;
            bVar2 = true;
        }
        len = len + 1;
    }
    arg1_00 = sym.imp.calloc();
    sym.imp.memcpy(*arg1 + iVar1, len);
    uVar4 = dbg.init_token(arg1_00, 2);
    if (arg1_00 != 0) {
        sym.imp.free();
    }
    return uVar4;
}

ulong dbg.reverse_stack(int64_t **arg1)

{
    ulong uVar1;
    int64_t *piVar2;
    ulong bts;
    ulong fts;
    
    uVar1 = dbg.init_token(***arg1, *(**arg1 + 8));
    fts = dbg.init_token_stack(uVar1);
    piVar2 = dbg.pop_token(*arg1);
    *arg1 = piVar2;
    while (*arg1 != NULL) {
        uVar1 = dbg.init_token(***arg1, *(**arg1 + 8));
        fts = dbg.push_token(fts, uVar1);
        piVar2 = dbg.pop_token(*arg1);
        *arg1 = piVar2;
    }
    return fts;
}

void dbg.write_canvas_to_file(ulong arg1, int64_t *arg2)

{
    ulong arg1_00;
    ulong can;
    ulong file_name;
    ulong i;
    ulong fp;
    
    arg1_00 = sym.imp.fopen();
    dbg.write_output_headings(arg1_00, arg2);
    for (i._0_4_ = 0; i < *(arg2 + 1); i._0_4_ = i + 1) {
        for (i._4_4_ = 0; i._4_4_ < *(arg2 + 0xc); i._4_4_ = i._4_4_ + 1) {
            sym.imp.fprintf(*(**(*(*arg2 + i * 8) + i._4_4_ * 8) + 4), ***(*(*arg2 + i * 8) + i._4_4_ * 8), 
                            *(**(*(*arg2 + i * 8) + i._4_4_ * 8) + 8));
        }
    }
    sym.imp.fclose();
    return;
}

int32_t dbg.get_mins_maxes(ulong arg1, int64_t **arg2)

{
    int32_t iVar1;
    int64_t *piVar2;
    uint64_t uVar3;
    double dVar4;
    ulong rev;
    ulong xymin_max;
    ulong result;
    
    result._0_4_ = 0;
    iVar1 = sym.imp.strncmp(arg1, 0x400);
    if (iVar1 == 0) {
        piVar2 = dbg.pop_token(*arg2);
        *arg2 = piVar2;
        piVar2 = dbg.pop_token(*arg2);
        *arg2 = piVar2;
        if (*(**arg2 + 8) == 4) {
            piVar2 = dbg.pop_token(*arg2);
            *arg2 = piVar2;
            uVar3 = sym.imp.atof();
            result._0_4_ = uVar3 ^ *0x90e0;
        }
        else {
            dVar4 = sym.imp.atof();
            result._0_4_ = dVar4;
        }
    }
    return result;
}
